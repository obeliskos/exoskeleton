/**
 * Advanced forms
 *
 * Forms are setup identical to dialogs except :
 * - They are not dismissed directly
 * - Buttons are 'EventButton' rather than 'DialogButton'
 * - Events allow running javascript on events
 */
 
/**
 * Set up Form definition object...
 */
var formDefinition = {
  MiddlePanel: {
    Type: "Panel",
    Properties: {
      Dock: "Fill",
      BackColor: "192,192,192",	
      Height: 20,
      Width: 20,
      Top: 100,
      Left: 10,
      Padding: "10, 10, 10, 10"
    }
  },
  MiddleLeft: {
    Type: "Panel",
    Parent: "MiddlePanel",
    Properties: {
      Dock: "Fill",
    }
  },
  MiddleRight: {
    Type: "Panel",
    Parent: "MiddlePanel",
    Properties: {
      Dock: "Right",
      Width: 360
    }
  },
  UserTypeList: {
    Type: "ListBox",
    Parent: "MiddleLeft",
    EmitEvents: true,
    Properties: {
      Dock: "Fill",
      TabIndex: 1,
      Items: ['Guest', 'Normal', 'Administrator'],
      SelectedItem: 'Normal'
    }
  },
  UserTypeLabel: {
    Type: "Label",
    Parent: "MiddleLeft",
    Properties: {
      Dock: "Top",
      Text: "Select your user type :",
      Height: 26
    }
  },
  CountryCheckList: {
    Type: "CheckedListBox",
    Parent: "MiddleRight",
    Payload: {
      CheckedIndices: [1, 4]
    },
    EmitEvents: false,
    Properties: {
      Dock: "Fill",
      CheckOnClick: true,
      Items: ["United States", "United Kingdom", "Germany", "France", "Australia", 
  				"Japan", "India", "Russia", "Other"]
    }
  },
  CountriesLabel: {
    Type: "Label",
    Parent: "MiddleRight",
    Properties: {
      Dock: "Top",
      Text: "Select countries of residence :",
      Height: 26
    }
  },
  TopPanel: {
    Type: "Panel",
    Properties: {
      Dock: "Top",
      BackColor: "PaleGreen",
      Height: 84,
      Padding: "10, 10, 10, 10"
    }
  },
  NameLabel: {
    Type: "Label",
    Parent: "TopPanel",
    Properties: {
      Text: "Enter your name :",
      Top: 8,
      Left: 7,
      Height: 20,
      Width: 140
    }
  },
  NameTextBox: {
    Type: "TextBox",
    Parent: "TopPanel",
    Properties: {
      Text: "Some User",
      Top: 32,
      Left: 10,
      Height: 30,
      WIdth: 140,
      TabIndex: 0
    }
  },
  EmployeeCheckBox: {
    Type: "CheckBox",
    Parent: "TopPanel",
    EmitEvents: true,
    Properties: {
      Text: "Employee",
      Top: 58,
      Left: 10
    }
  },
  GenderMale: {
    Type: "RadioButton",
    Parent: "TopPanel",
    EmitEvents: true,
    Properties: {
      Text: "Male",
      Top: 57,
      Left: 165,
      AutoSize: true
    }
  },
  GenderFemale: {
    Type: "RadioButton",
    Parent: "TopPanel",
    Properties: {
      Text: "Female",
      Top: 57,
      Left: 225,
      AutoSize: true
    }
  },
  AgeLabel: {
    Type: "Label",
    Parent: "TopPanel",
    Properties: {
      Text: "Enter your age:",
      AutoSize: true,
      Top: 10,
      Left: 170
    }
  },
  AgeNumeric: {
    Type: "NumericUpDown",
    Parent: "TopPanel",
    EmitEvents: true,
    Properties: {
      Left: 170,
      Top: 30,
      Minimum: 13,
      Maximum: 120
    }
  },
  DateLabel: {
    Type: "Label",
    Parent: "TopPanel",
    Properties: {
      Text: "Pick some date :",
      AutoSize: true,
      Top: 10,
      Left: 310
    }
  },
  StartDate: {
    Type: "DateTimePicker",
    Parent: "TopPanel",
    EmitEvents: true,
    Properties: {
      Top: 30,
      Left: 310,
      Width: 240
    }
  },
  ComboLabel: {
    Type: "Label",
    Parent: "TopPanel",
    Properties: {
      Text: "Pick some value :",
      AutoSize: true,
      Top: 10,
      Left: 565
    }
  },
  TestComboBox: {
    Type: "ComboBox",
    Parent: "TopPanel",
    EmitEvents: true,
    Properties: {
      AutoSize: true,
      Top: 30,
      Left: 565,
      Items: ["one", "two", "three"]
    }
  },
  BottomPanel: {
    Type: "Panel",
    Properties: {
      Dock: "Bottom",
      Height: 50,
      Padding: "10, 10, 10, 10"
    }
  },
  IncrementButton: {
    Type: "Button",
    Parent: "BottomPanel",
    EmitEvents: true,
    Properties: {
      Text: "Increment Age",
      Top: 10,
      Left: 280,
      Height: 30,
      Width: 100,
      UseVisualStyleBackColor: true
    }
  },
  SelectAllButton: {
    Type: "Button",
    Parent: "BottomPanel",
    EmitEvents: true,
    Properties: {
      Text: "Select All",
      Top: 10,
      Left: 390,
      Height: 30,
      Width: 100,
      UseVisualStyleBackColor: true
    }
  },
  SaveButton: {
    Type: "Button",
    Parent: "BottomPanel",
    EmitEvents: true,
    Properties: {
      Top: 10,
      Left: 500,
      Height: 30,
      Width: 100,
      UseVisualStyleBackColor: true,
      TabIndex:2,
      Text: "Save and Close"
    }
  }
};

/**
 * Initialize and apply definition to our form
 */

exoskeleton.form.initialize("ExampleForm", {
  Text: "Example Exoskeleton Form", 
  Width: 720, 
  Height: 400
});

// now apply that definition
exoskeleton.form.applyDefinition(
  "ExampleForm", 
  JSON.stringify(formDefinition)
);

/**
 * Define Events
 */

// we only need to clear events because we allow re-running this 
// script which adds listeners within a single page load in 
// exo console. Normally you might clear all by calling clear()
// but the exo console needs its menu and toolbar events.

exoskeleton.events.clear("ExampleForm.SaveButton.Click");
exoskeleton.events.clear("ExampleForm.SelectAllButton.Click");
exoskeleton.events.clear("ExampleForm.IncrementButton.Click");

exoskeleton.events.clear("ExampleForm.UserTypeList.SelectedIndexChanged");
exoskeleton.events.clear("ExampleForm.EmployeeCheckBox.CheckedChanged");
exoskeleton.events.clear("ExampleForm.GenderMale.CheckedChanged");
exoskeleton.events.clear("ExampleForm.StartDate.ValueChanged");
exoskeleton.events.clear("ExampleForm.AgeNumeric.ValueChanged");
exoskeleton.events.clear("ExampleForm.TestComboBox.SelectedIndexChanged");
exoskeleton.events.clear("ExampleForm.CountryCheckList.ItemCheck");

// EventButtons will return all control values in event data
exoskeleton.events.on("ExampleForm.SaveButton.Click", function(data) {
  xo.logText("ExampleForm closed with these control values:");
  xo.logObject(data);
  exoskeleton.form.close("ExampleForm");
});

exoskeleton.events.on("ExampleForm.SelectAllButton.Click", function(data) {
  exoskeleton.form.applyControlProperties("ExampleForm", {
    CountryCheckList : { CheckedIndices: [0, 1, 2, 3, 4, 5, 6, 7, 8 ] }
  });
});

exoskeleton.events.on("ExampleForm.IncrementButton.Click", function(data) {
  var age = data.AgeNumeric.Value + 1;
  
  exoskeleton.form.applyControlProperties("ExampleForm", {
    AgeNumeric : { Value: age }
  });
});

// Other Control Events return only that control's values in event data
exoskeleton.events.on("ExampleForm.UserTypeList.SelectedIndexChanged", function(data) {
  xo.logText("SelectedIndexChanged event data :");
  xo.logObject(data);
});

exoskeleton.events.on("ExampleForm.EmployeeCheckBox.CheckedChanged", function(data) {
  xo.logText("CheckedChanged event data :");
  xo.logObject(data);
  
  // additional example to make user type listbox enabled
  // or disabled based on user clicking the employee checkbox
  exoskeleton.form.applyControlProperties("ExampleForm", {
  	UserTypeList: { Enabled: data.Checked }
  });
});

exoskeleton.events.on("ExampleForm.GenderMale.CheckedChanged", function(data) {
  xo.logText("CheckedChanged event data :");
  xo.logObject(data);
});

exoskeleton.events.on("ExampleForm.StartDate.ValueChanged", function(data) {
  xo.logText("ValueChanged event data :");
  xo.logObject(data);
});

exoskeleton.events.on("ExampleForm.AgeNumeric.ValueChanged", function(data) {
  xo.logText("ValueChanged event data :");
  xo.logObject(data);
});

exoskeleton.events.on("ExampleForm.TestComboBox.SelectedIndexChanged", function(data) {
  xo.logText("SelectedIndexChanged event data :");
  xo.logObject(data);
});

// Disabled below event because it fires multiple times when we 'Select All'
// A normal event probably would be fast enough, but our logging slows it down.
/*
exoskeleton.events.on("ExampleForm.CountryCheckList.ItemCheck", function(data) {
  xo.logText("ItemCheck event data :");
  xo.logObject(data);
});
*/

/**
 * Apply control properties and payloads and Show()
 * If we have established events which arise from changing
 * the values, they are established and should fire.
 */

exoskeleton.form.applyControlProperties("ExampleForm", {
  NameTextBox : { Text: "TestUser" },
  EmployeeCheckBox : { Checked: true },
  AgeNumeric : { Value: 19 },
  GenderFemale: { Checked: true },
  UserTypeList: { SelectedItem: 'Administrator' },
  StartDate: { Value: '1/2/2017' },
  TestComboBox : { SelectedItem: 'three' },
  CountryCheckList: { 
    CheckedIndices: [0, 1, 2],
    BackColor: "LightBlue" 
  }
});

// Payload is for 'meta' properties which aren't directly set.
//
// Below make more sense if it was a datagridview or dialogbutton
// which need this.  We have a hack which let's us deal with 
// CheckedIndices in above applyControlProperties.

exoskeleton.form.applyControlPayload(
	"ExampleForm", 
    "CountryCheckList", 
    { CheckedIndices: [0, 2, 3] }
);

// now, show the form and await events
exoskeleton.form.show("ExampleForm");



